#!/usr/bin/env python
# usage: ./autogen_generate_files.py <filters.yaml> [template-dir] [output-dir] [1|0]
import sys
import os
import yaml
from mako.template import Template

# Load filters config file as dict
filters_config_filename = sys.argv[1]
with open(filters_config_filename, 'r') as stream:
    filter_dict = yaml.load(stream)

# Define template dir (optional argument)
if len(sys.argv) < 3:
	template_dir = '.'
else:
	template_dir = sys.argv[2]

# Define output dir (optional argument)
if len(sys.argv) < 4:
	output_dir = '.'
else:
	output_dir = sys.argv[3]

# Define if we should compact generated code into 3 files only (.h, .cxx and .xml)
if len(sys.argv) < 5:
	compact_files = 0
else:
	compact_files = (int)(sys.argv[4])


# Read templates
header_template = Template(filename=os.path.join(template_dir,"vtkPM___DataPointsFilter.h.template"))
cxx_template = Template(filename=os.path.join(template_dir,"vtkPM___DataPointsFilter.cxx.template"))
xml_template = Template(filename=os.path.join(template_dir,"vtkPM___DataPointsFilter.xml.template"))

if compact_files:
	header_output = '';
	cxx_output = '';
	xml_output = '';

# Generate files from template
for filterName in filter_dict:
	rendered_header = header_template.render(filterName=filterName,filterProperties=filter_dict[filterName]['properties'])
	if not compact_files:
		with open(os.path.join(output_dir,"vtkPM" + filterName + ".h"),'w') as output_file:
			output_file.write(rendered_header)
	else:
		header_output = header_output + rendered_header;
	
	rendered_cxx = cxx_template.render(filterName=filterName,filterProperties=filter_dict[filterName]['properties'])
	if not compact_files:
		with open(os.path.join(output_dir,"vtkPM" + filterName + ".cxx"),'w') as output_file:
			output_file.write(rendered_cxx)
	else:
		cxx_output = cxx_output + rendered_cxx;

	if 'xml_info' in filter_dict[filterName]:
		rendered_xml = xml_template.render(filterName=filterName,filterProperties=filter_dict[filterName]['properties'],filterXmlInfo=filter_dict[filterName]['xml_info'])
		if not compact_files:
			with open(os.path.join(output_dir,"vtkPM" + filterName + ".xml"),'w') as output_file:
				output_file.write(rendered_xml)
		else:
			xml_output = xml_output + rendered_xml;

if compact_files:
	with open(os.path.join(output_dir,"vtkPMAutoGeneratedDataFilters.h"),'w') as output_file:
		output_file.write(header_output)

	with open(os.path.join(output_dir,"vtkPMAutoGeneratedDataFilters.cxx"),'w') as output_file:
		output_file.write(cxx_output)

	with open(os.path.join(output_dir,"vtkPMAutoGeneratedDataFilters.xml"),'w') as output_file:
		output_file.write(xml_output)
