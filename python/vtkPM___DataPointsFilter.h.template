/*=========================================================================

  Program:   Lib Point Matcher Plugin for ParaView
  Module:    vtkPM${filterName}.h

  Copyright (c) Ellon Paiva Mendes
  All rights reserved.
  See LICENSE file for details.

=========================================================================*/
// .NAME vtkPM${filterName} -
// .SECTION Description
//

#ifndef __vtkPM${filterName}_h
#define __vtkPM${filterName}_h

#include <vtkPolyDataAlgorithm.h>
#include <vtkPMFiltersModule.h>

class  VTKPMFILTERS_EXPORT vtkPM${filterName} : public vtkPolyDataAlgorithm
{
public:
  vtkTypeMacro(vtkPM${filterName}, vtkPolyDataAlgorithm);
  void PrintSelf(ostream& os, vtkIndent indent);

  static vtkPM${filterName} *New();

% for property in filterProperties:
<%
    if len(property) == 3:
        propName, propType, _ = property
    else:
        propName, propType, _, _, _ = property
    PropName = propName[0].upper() + propName[1:]
%>\
  vtkSetMacro(${PropName}, ${parse_type(propType)});
  vtkGetMacro(${PropName}, ${parse_type(propType)});

% endfor
protected:

% for property in filterProperties:
<%
    if len(property) == 3:
        propName, propType, _ = property
    else:
        propName, propType, _, _, _ = property
    PropName = propName[0].upper() + propName[1:]
%>\
  ${parse_type(propType)} ${PropName};
% endfor

  virtual int RequestData(vtkInformation *request,
                          vtkInformationVector **inputVector,
                          vtkInformationVector *outputVector);

  vtkPM${filterName}();
  virtual ~vtkPM${filterName}();

private:
  vtkPM${filterName}(const vtkPM${filterName}&);  // Not implemented.
  void operator=(const vtkPM${filterName}&);  // Not implemented.
};

#endif
<%def name="parse_type(type)">\
% if type == 'string':
std::string\
% else:
${type}\
% endif
</%def>